# TCP/IP 흐름제어/혼잡제어

- TCP는 네트워크 통신에서 신뢰적인 연결 방식
- reliable한 네트워크를 제공 -> 패킷 손실/순서 바뀜/네트워크 혼잡/과부하 의 문제점이 존재


## 흐름제어

- 클라이언트와 서버의 데이터 처리 속도 차이를 해결하기 위한 기법
- 클라이언트의 속도가 빠르면 문제 발생 -> 서버에서 제한된 용량을 초과한 데이터는 손실될 수 있다. 
- 클라이언트의 데이터 전송량을 서버에 맞춰서 조절해야 한다. 

1) Stop and Wait 방식

- 전송한 패킷에 대해 응답을 받아야만 다음 패킷을 전송하는 방식


2) Sliding Window 방식

- 서버측에서 설정한 버퍼인 윈도우가 존재
- 윈도우 크기 범위에서는 응답 없이도 다음 패킷을 전송 가능
- 클라이언트는 ACK 응담을 받으면 응답이 확인된 프레임의 수 만큼 윈도우를 이동
- 모든 호스트는 송신/수신을 위한 2개의 윈도우를 갖고 있다.
- 3-way handshaking을 통해 서버의 수신 윈도우 사이즈에 클라이언트의 송신 윈도우 사이즈를 일치시킨다. 



## 혼잡제어

- 클라이언트의 데이터 전달과 네트워크의 데이터 처리 속도 차이를 해결하기 위한 기법
- 네트워크 내에 패킷이 지나치게 많아지거나, 한 라우터에 패킷이 몰려서 모든 패킷을 처리하기 어려워지는 혼잡 상황이 발생할 수 있다.
- 네트워크의 혼잡을 피하기 위해 클라이언트에서 보내는 데이터의 전송속도를 제어하는 기법

1) AIMD (Additive Increase / Multiplicative Decrease) 기법 (혼잡 회피)
- 처음에는 패킷을 1개씩 전송 -> 문제없이 도착하면 윈도우 사이즈를 1씩 증가시킨다. 
- 패킷 전송에 실패하거나, 일정 시간을 초과하면 전송 속도를 1/2로 줄인다. 
- 장점 : 시간이 흐르면 모든 호스트가 평형상태로 수렴하게 되는 공평한 방식
- 단점 : 네트워크가 혼잡해지고 나서야 대역폭을 줄이는 방식 / 초기에 전송속도를 올리는데 시간이 소요된다.

2) Slow Start 
- 처음에는 패킷을 1개씩 전송 -> 한 주기마다 윈도우 사이즈를 2배로 증가시킨다. 
- 혼잡이 발생하면 윈도우 사이즈를 1로 되돌린다. 
- 장점 : 한번 혼잡 현상이 발생하고 나면 네트워크의 수용량을 어느 정도 예상할 수 있다. 
- 단점 : 초기에는 네트워크의 수용량을 예상할 수 없다.

3) Fast Retransmit
- 서버측에서 이전 패킷이 도착하지 않고 다음 패킷이 도착한 경우에도 ACK 응답을 보낸다. 
- 중간에 손실이 발생하면 클라이언트는 순번이 중복된 ACK 패킷을 받게 된다. 
- 중복된 순번의 패킷을 3개 받으면 재전송하고, 혼잡 상황이므로 윈도우 사이즈를 줄인다. 

4) Fast Recovery
- 혼잡 상황이 되면 윈도우를 1이 아닌 절반으로 줄이고, 다시 선형으로 증가시킨다. 
- 첫 번째 혼잡 상황 이후로는 AIMD 방식과 동일


